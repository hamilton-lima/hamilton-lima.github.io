<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>kiss on Hamilton Lima</title><link>https://hamiltonlima.com/tags/kiss/</link><description>Recent content in kiss on Hamilton Lima</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright><lastBuildDate>Fri, 11 Oct 2024 12:56:42 +0000</lastBuildDate><atom:link href="https://hamiltonlima.com/tags/kiss/index.xml" rel="self" type="application/rss+xml"/><item><title>Guiding Principles for Cleaner Code: YAGNI, KISS, SOLID, and Beyond</title><link>https://hamiltonlima.com/posts/guiding-principles-for-cleaner-code-yagni-kiss-solid-and-beyond/</link><pubDate>Fri, 11 Oct 2024 12:56:42 +0000</pubDate><guid>https://hamiltonlima.com/posts/guiding-principles-for-cleaner-code-yagni-kiss-solid-and-beyond/</guid><description>&amp;ldquo;Any fool can write code that a computer can understand. Good programmers write code that humans can understand.&amp;rdquo; - Martin Fowler source
When you start your coding journey, the natural instinct is to write instructions as if you&amp;rsquo;re talking to a person: &amp;ldquo;Hey computer, grab some eggs, butter, and flour, and let&amp;rsquo;s bake a cake.&amp;rdquo; Procedural it isâ€”instruction after instruction, right? It seems easy to understand, but itâ€™s actually not ðŸ˜Š.</description></item></channel></rss>