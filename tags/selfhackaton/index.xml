<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>selfhackaton on Hamilton Lima</title><link>https://hamiltonlima.com/tags/selfhackaton/</link><description>Recent content in selfhackaton on Hamilton Lima</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright><lastBuildDate>Mon, 21 May 2018 12:52:49 +0000</lastBuildDate><atom:link href="https://hamiltonlima.com/tags/selfhackaton/index.xml" rel="self" type="application/rss+xml"/><item><title>Image Processing with Ionic</title><link>https://hamiltonlima.com/posts/image-processing-with-ionic/</link><pubDate>Mon, 21 May 2018 12:52:49 +0000</pubDate><guid>https://hamiltonlima.com/posts/image-processing-with-ionic/</guid><description>One of these days at the office at the end of an inspiring meeting we found ourselves stuck. Image some experienced Software Engineers trying to find a proper angle to make a picture. That&amp;rsquo;s right trying to find an angle, and the best we could do was this. Most of the meeting room walls are made of glass, it&amp;rsquo;s an invitation to make notes, to draw, but how to make pictures of it so we can save as &amp;ldquo;documentation&amp;rdquo;.</description></item><item><title>beepify.io source code available</title><link>https://hamiltonlima.com/posts/beepify-io-source-code-available/</link><pubDate>Mon, 02 Jan 2017 22:21:50 +0000</pubDate><guid>https://hamiltonlima.com/posts/beepify-io-source-code-available/</guid><description>All the source code from the beepify posts is available at: https://github.com/hamilton-lima/beepify-server-playframework See the related posts:
beepify.io, server side - part 1 beepify.io, server side - part 2</description></item><item><title>Increase Ant Hibernate Junit tests Performance by 80%</title><link>https://hamiltonlima.com/posts/increase-ant-hibernate-junit-tests-performance-by-80/</link><pubDate>Tue, 27 Dec 2016 20:52:25 +0000</pubDate><guid>https://hamiltonlima.com/posts/increase-ant-hibernate-junit-tests-performance-by-80/</guid><description>If don´t want to read everything, just set forkingmode=&amp;ldquo;once&amp;rdquo; to have huge improvement in your tests processing time. :)
Now the details&amp;hellip; I have several, around 100 junit tests in Robolucha project, most of then use Hibernate and are run by an ant script. When you start Java Virtual machine Hibernate prepares itself to connect to the database by checking the necessary tables and preparing all the internals needed to work, but this process takes some time, some seconds to say the true.</description></item><item><title>Holidays selfhackaton - the start</title><link>https://hamiltonlima.com/posts/holidays-selfhackaton-the-start/</link><pubDate>Mon, 26 Dec 2016 15:46:53 +0000</pubDate><guid>https://hamiltonlima.com/posts/holidays-selfhackaton-the-start/</guid><description>The selfhackaton plan!
During this holidays celebration week, I will join myself in a hackaton! Me myself and I will code several new features to Robolucha.
The image above shows the sprint meeting board, when my stakeholder, a.k.a. wife forced me to define priorities and a clear order of what to deliver during this week :) Translating the characters above for something more understandable, here is the list:
post about the selfhackaton itself describing the goals (done) merge move() and turn() methods in only one command queue so the commands are not executed in parallel rename start/repeat methods to setup/loop adopting &amp;ldquo;arduino-like&amp;rdquo; names post about the ant &amp;amp; hibernate unit tests optimization convert robolucha game presentation layer, the arena itself, to an angular component create the first version of the map editor using the new presentation layer add obstacles to the map editor create the server API to use in map editor elements create new games using the new map editor definitions Let´s code!</description></item><item><title>CORS is your friend</title><link>https://hamiltonlima.com/posts/cors-is-your-friend/</link><pubDate>Wed, 19 Oct 2016 23:36:58 +0000</pubDate><guid>https://hamiltonlima.com/posts/cors-is-your-friend/</guid><description>As soon we started to test the integration of the server side with the mobile application we found out that we were missing one little detail
Enable Cross Origin Resource Sharing!
Those beatiful words means: We sould tell the server to allow other servers to call our services :) As we are not doing any kind of authentication we should let any server make the calls. So we just went to http://enable-cors.</description></item><item><title>publish playframework to production</title><link>https://hamiltonlima.com/posts/publish-playframework-to-production/</link><pubDate>Wed, 19 Oct 2016 23:06:29 +0000</pubDate><guid>https://hamiltonlima.com/posts/publish-playframework-to-production/</guid><description>Running an playframework application locally is very easy, you just go to the folder, and run
activator run But how to put all of the necessary files at a server? end of the day we are talking about lots of files and dependencies. Luckly, playframework has a command and instructions for that, its called
dist That creates an zip file with all the necessary libraries and config files in order to run the application at the server.</description></item><item><title>should price be an attribute ?</title><link>https://hamiltonlima.com/posts/should-price-be-an-attribute/</link><pubDate>Wed, 19 Oct 2016 22:32:59 +0000</pubDate><guid>https://hamiltonlima.com/posts/should-price-be-an-attribute/</guid><description>Just after I post about the data structure and server side implementation of beepify.io, I got a question about the Price entity. One very experienced guy on SAP technologies said:
I never saw Price as an entity, allways saw as attribute, why you made Price an Entity?
And support his question he also send some example structure. My first was, I had no idea why the model has price as entity :) but after some thinking, I just realized that I model in the way I tought about the business.</description></item><item><title>beepify.io, server side release 1 - part 2</title><link>https://hamiltonlima.com/posts/beepify-io-server-side-release-1-part-2/</link><pubDate>Mon, 17 Oct 2016 19:58:24 +0000</pubDate><guid>https://hamiltonlima.com/posts/beepify-io-server-side-release-1-part-2/</guid><description>The second part of the server side release 1 will describe some details about the implementation it self. please see the first part for configuration details.
Quick tips to a playframework application Of course there are tons of nice features that can be used, but for the sake of simplicity here are the concepts that I consider the most important ones for this implementation: Edit the file conf/routes to match the services urls and the implementation of it, as simple as: GET /mock controllers.</description></item><item><title>beepify.io, server side release 1 - part 1</title><link>https://hamiltonlima.com/posts/beepify-io-server-side-release-1-part1/</link><pubDate>Mon, 17 Oct 2016 19:10:05 +0000</pubDate><guid>https://hamiltonlima.com/posts/beepify-io-server-side-release-1-part1/</guid><description>These are the server side release 1 original plan, that is complete with some minor changes highlighted on each line
Install playframework environment - not in the original plan Create the models Read current location latitude, longitude Add sample data to the database - changed to use a service to create data instead of SQL to add data Create services Get data receive product code, latitude and longitude Return all prices It´s impressive how environment setup takes time, usually we forget to include this step when planning projects, but believe me this takes of time in a project, let´s go over each step I did on this implementation.</description></item><item><title>beepify.io - implementation plan</title><link>https://hamiltonlima.com/posts/beepify-io-implementation-plan/</link><pubDate>Sun, 16 Oct 2016 15:00:21 +0000</pubDate><guid>https://hamiltonlima.com/posts/beepify-io-implementation-plan/</guid><description>This is the first implementation plan :) that will of course change during the implementation. So this is only the first guideline.
release 1 server create the models
read current location latitude, longitude (will need this to test)
add sample data to the database create services
get data receive product code, latitude and longitude return all prices deploy application to server client enter product code get current location from GPS get product prices from server</description></item></channel></rss>