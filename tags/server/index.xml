<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>server on Hamilton Lima</title><link>http://hamiltonlima.com/tags/server/</link><description>Recent content in server on Hamilton Lima</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright><lastBuildDate>Wed, 19 Oct 2016 23:36:58 +0000</lastBuildDate><atom:link href="http://hamiltonlima.com/tags/server/index.xml" rel="self" type="application/rss+xml"/><item><title>CORS is your friend</title><link>http://hamiltonlima.com/posts/cors-is-your-friend/</link><pubDate>Wed, 19 Oct 2016 23:36:58 +0000</pubDate><guid>http://hamiltonlima.com/posts/cors-is-your-friend/</guid><description>As soon we started to test the integration of the server side with the mobile application we found out that we were missing one little detail
Enable Cross Origin Resource Sharing!
Those beatiful words means: We sould tell the server to allow other servers to call our services :) As we are not doing any kind of authentication we should let any server make the calls. So we just went to http://enable-cors.</description></item><item><title>publish playframework to production</title><link>http://hamiltonlima.com/posts/publish-playframework-to-production/</link><pubDate>Wed, 19 Oct 2016 23:06:29 +0000</pubDate><guid>http://hamiltonlima.com/posts/publish-playframework-to-production/</guid><description>Running an playframework application locally is very easy, you just go to the folder, and run
activator run But how to put all of the necessary files at a server? end of the day we are talking about lots of files and dependencies. Luckly, playframework has a command and instructions for that, its called
dist That creates an zip file with all the necessary libraries and config files in order to run the application at the server.</description></item></channel></rss>