<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Posts on Hamilton Lima</title><link>http://hamiltonlima.com/posts/</link><description>Recent content in Posts on Hamilton Lima</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright><lastBuildDate>Mon, 21 May 2018 12:52:49 +0000</lastBuildDate><atom:link href="http://hamiltonlima.com/posts/index.xml" rel="self" type="application/rss+xml"/><item><title>Image Processing with Ionic</title><link>http://hamiltonlima.com/posts/image-processing-with-ionic/</link><pubDate>Mon, 21 May 2018 12:52:49 +0000</pubDate><guid>http://hamiltonlima.com/posts/image-processing-with-ionic/</guid><description>One of these days at the office at the end of an inspiring meeting we found ourselves stuck. Image some experienced Software Engineers trying to find a proper angle to make a picture. That&amp;rsquo;s right trying to find an angle, and the best we could do was this. Most of the meeting room walls are made of glass, it&amp;rsquo;s an invitation to make notes, to draw, but how to make pictures of it so we can save as &amp;ldquo;documentation&amp;rdquo;.</description><content type="html"><![CDATA[<p>One of these days at the office at the end of an inspiring meeting we found ourselves stuck. Image some experienced Software Engineers trying to find a proper angle to make a picture. That&rsquo;s right trying to find an angle, and the best we could do was this. <img src="/images/2018/05/2018-05-16-12.32.53.jpg" alt=""> Most of the meeting room walls are made of glass, it&rsquo;s an invitation to make notes, to draw, but how to make pictures of it so we can save as &ldquo;documentation&rdquo;. The <a href="https://github.com/hamilton-lima/glassCamera">https://github.com/hamilton-lima/glassCamera</a> project is a prototype to explore solutions to this problem, The initial implementation creates an image filter using color distance to filter the image and create a black and white version of it. as expected the result is not perfect but the exploration of the current state of <a href="https://ionicframework.com/">Ionic</a> worth the effort.</p>
<h3 id="here-are-the-notes-from-the-exploration">Here are the notes from the exploration:</h3>
<ul>
<li>There is no camera in the ionic browser neither in the emulator, I could Mock the camera with a fixed image, but I rather use a real device and in this case an iPhone.</li>
<li>The <a href="https://github.com/hamilton-lima/glassCamera/blob/master/config.xml">config.xml</a> file is where you define what features you want to use the device, you will see at the end of the file the intent to use the camera and the gallery to save images.</li>
<li>The <a href="https://ionicframework.com/docs/components/#buttons">Ionic framework</a> uses <a href="https://angular.io/">Angular 5</a>, use <a href="https://www.typescriptlang.org/">Typescript</a> and the nice <a href="https://github.com/hamilton-lima/glassCamera/tree/master/src/pages/home">component organization</a> was indeed a very good experience.</li>
<li>I used a <a href="https://ionicframework.com/docs/api/components/range/Range/">Range</a> component as input for the minimum color distance, but every time I touched the component the &ldquo;ionChange&rdquo; an event was triggered making too many calls to the image update, <a href="https://github.com/hamilton-lima/glassCamera/blob/3915d99041f7aa82fa4dc0a97a66a3f4b52d6228/src/pages/home/home.html#L4">adding &ldquo;debounce&rdquo; attribute set as 500</a>, that waits for 500milisecs before triggering the change event solved the problem.</li>
<li><a href="https://en.wikipedia.org/wiki/Euclidean_distance">Euclidian distance</a> is used to calculate how similar the colors are, the implementation can be found at <a href="https://github.com/hamilton-lima/glassCamera/blob/3915d99041f7aa82fa4dc0a97a66a3f4b52d6228/src/pages/home/imageprocessor.ts#L109">colorDistance</a> method.</li>
<li>The <a href="https://github.com/hamilton-lima/glassCamera/blob/master/src/pages/home/imageprocessor.ts">image processing</a> workflow is : <a href="https://github.com/hamilton-lima/glassCamera/blob/3915d99041f7aa82fa4dc0a97a66a3f4b52d6228/src/pages/home/imageprocessor.ts#L125">create an Image object in-memory,</a> load the base64 data in it, draw in a in-memory canvas, for each pixel <a href="https://github.com/hamilton-lima/glassCamera/blob/3915d99041f7aa82fa4dc0a97a66a3f4b52d6228/src/pages/home/imageprocessor.ts#L88">that has a color close to the target color</a> is painted black and the others white, then <a href="https://github.com/hamilton-lima/glassCamera/blob/3915d99041f7aa82fa4dc0a97a66a3f4b52d6228/src/pages/home/imageprocessor.ts#L98">create a new image with the results</a>, draw in a new canvas and return the updated base64, piece of cake :D.</li>
</ul>
<p>There are several links in the post for the project, feel free to use as you want. This is the main page in case you missed the links <a href="https://github.com/hamilton-lima/glassCamera">https://github.com/hamilton-lima/glassCamera.</a></p>
]]></content></item><item><title>Using Redis Publish and Subscribe</title><link>http://hamiltonlima.com/posts/using-redis-publish-and-subscribe/</link><pubDate>Fri, 11 May 2018 01:01:24 +0000</pubDate><guid>http://hamiltonlima.com/posts/using-redis-publish-and-subscribe/</guid><description>There is this game called Robolucha where you code your robots to fight in a virtual arena. I&amp;rsquo;ve been working on this project for some years and last year decided to rewrite everything, mainly for the sake of technical exploration and this post share challenges using Redis Publish and subscribe.
Proving the concept Before I start to hit the keyboard to refactor MatchStatePublisher to send match states to Redis, I had some homework to do.</description><content type="html"><![CDATA[<p>There is this game called Robolucha where you code your robots to fight in a virtual arena. I&rsquo;ve been working on this project for some years and last year decided to rewrite everything, mainly for the sake of technical exploration and this post share challenges using Redis Publish and subscribe.</p>
<h2 id="proving-the-concept">Proving the concept</h2>
<p>Before I start to hit the keyboard to refactor MatchStatePublisher to send match states to Redis, I had some homework to do. So I build a POC (Proof of concept) to understand how <a href="https://github.com/xetorthio/jedis">Jedis</a> client works and is possible to do with it. The first discovery is that you can&rsquo;t use the same connection for publishing AND subscribing, you need to separate JedisPool or even a Jedis connection if there is no pool. The POC has two separated apps one to publish data and another to subscribe to the changes, the code can be found <a href="https://github.com/hamilton-lima/robolucha/tree/master/pocs/redis/java-pubsub">here</a></p>
<h2 id="how-to-test-it">How to test it</h2>
<p>1. start the Redis server using the default <a href="https://hub.docker.com/_/redis/">Redis docker image</a></p>
<pre><code>docker run --name test-redis --rm -p 6379:6379 -d redis
</code></pre><p>2. run the Subscriber class 3. run the Publisher class that will start 10 threads to send 5000 messages each The subscriber screen should display every single message received.</p>
<h2 id="using-the-lessons-in-the-runner-application">Using the lessons in the runner application</h2>
<p>After the POC establish the foundations for the implementation I add some extra requirements:</p>
<ul>
<li>The queue names should be auto-generated based on the class name</li>
<li>Observables from <a href="https://github.com/ReactiveX/RxJava">RxJava</a> should be used to implement the subscription</li>
<li>The subscription process should not block the current Thread</li>
<li>The queue message parsing from and to objects should be transparent</li>
<li>Publishing should accept <a href="https://en.wikipedia.org/wiki/Plain_old_Java_object">POJO</a> as parameters</li>
<li>The entire publish and subscribe process should be testable</li>
</ul>
<p>I can say that all the requirements were fulfilled. Some with more challenges than others :) Let&rsquo;s go over the details of each one.</p>
<h2 id="queue-names-generation-observables-and-asynchronous-subscription">Queue names generation, Observables, and asynchronous subscription</h2>
<p>The method that generates the queue name is very straightforward</p>
<pre><code>private String getChannelName(Class clazz) {
    return clazz.getCanonicalName();
}
</code></pre><p>So when using subscribe or publish the queue names would be something like com.robolucha.models.Luchador For the use of Observables, the method subscribes returns a <a href="http://reactivex.io/RxJava/2.x/javadoc/io/reactivex/subjects/BehaviorSubject.html">BehaviorSubject</a> of whatever class is sent as a parameter for the subscription.</p>
<pre><code>public &lt;T&gt; BehaviorSubject subscribe(Class&lt;T&gt; clazzToSubscribe) {
    BehaviorSubject&lt;T&gt; result = BehaviorSubject.create();
    ...
    return result;
}
</code></pre><p><a href="https://github.com/xetorthio/jedis">Jedis</a> client is implementation blocks the current thread when the subscription happens, to workaround that there is a separated Thread to subscribe and an additional listener to interrupt this thread the BehaviorSubject completes.</p>
<pre><code>Thread subscriber = new Thread(new Runnable() {
    public void run() {
        Jedis subscriber = subscriberPool.getResource();
        subscriber.subscribe(new JedisPubSub() {
        ...
        }, channel);
        subscriber.close();
    }
});

result.subscribe(new ThreadKiller&lt;&gt;(subscriber));
subscriber.start();
</code></pre><h2 id="transparent-parsing-pojo">Transparent parsing, POJO</h2>
<p>When publishing the object is converted to JSON and when receiving the message the JSON string is converted to the expected object type as well. making the process transparent for the consumer of the RemoteQueue implementation.</p>
<pre><code>public void onMessage(String channel, String message) { (1)
    T data = gson.fromJson(message, clazzToSubscribe); (2)
    result.onNext(data); (3)
}
</code></pre><p>(1) happens when the subscription receives a message from the queue (2) convert the JSON to the object type defined by clazzToSubscribe (3) push the received value to the BehaviourSubject stream</p>
<h2 id="unit-testing-er-end-to-end-testing">Unit testing&hellip; er&hellip; End to End testing</h2>
<p>The initial expectation was to build a unit test, but the final implementation is actually and End2End, and actually, a Redis server is used in the test. To have the Redis server running for the test the class <a href="https://github.com/hamilton-lima/robolucha/blob/master/src/runner/src-test/com/robolucha/publisher/RedisDockerHelper.java">RedisDockerHelper</a> was created to wrap the docker commands to start and stop a Redis server, meaning that in the test the usage is only .start() and .stop(), see class <a href="https://github.com/hamilton-lima/robolucha/blob/master/src/runner/src-test/com/robolucha/publisher/RedisDockerHelper.java">RedisDockerHelper</a> that run the docker commands and logs the console outputs. Here are some fragments from the test</p>
<pre><code>try (RemoteQueue queue = new RemoteQueue(Config.getInstance())) {
</code></pre><p>Execute the code using <a href="https://github.com/hamilton-lima/robolucha/blob/master/src/runner/src/com/robolucha/publisher/RemoteQueue.java">the RemoteQueue</a> instance as an <a href="https://docs.oracle.com/javase/8/docs/api/java/lang/AutoCloseable.html">AutoCloseable</a> so when the block finishes the close() the method from the object will be called releasing the <a href="https://github.com/xetorthio/jedis">Jedis</a> pools from memory.</p>
<pre><code>assertEquals(&quot;subscribe&quot;, future.get(5, TimeUnit.SECONDS));
</code></pre><p>This assertion will wait for the future object (<a href="https://docs.oracle.com/javase/8/docs/api/java/util/concurrent/CompletableFuture.html">CompletableFuture</a>) to be fulfilled or for the timeout of 5 seconds, whatever comes first. This is an elegant way to keep the unit test waiting for the pub and subprocess to end. Note that inside the accept method the future is fulfilled with the command future.complete(&ldquo;subscribe&rdquo;); See the complete test here: <a href="https://github.com/hamilton-lima/robolucha/blob/master/src/runner/src-test/com/robolucha/publisher/RemoteQueueTest.java">RemoteQueueTest</a></p>
<h2 id="complete-aka-last-words">.complete() a.k.a. last words</h2>
<p>There were lots of interesting challenges in this implementation, but for me, the most interesting one was the use of generics with Observables for the subscription process, It&rsquo;s nice to see fragments like this:</p>
<pre><code>public &lt;T&gt; BehaviorSubject subscribe(Class&lt;T&gt; clazzToSubscribe) {
BehaviorSubject&lt;T&gt; result = BehaviorSubject.create();
</code></pre><p>Of course, there are other ways to implement this without RxJava, or any other library, but it looks really good with the Observables.</p>
]]></content></item><item><title>Virtualbox with static and dynamic IP</title><link>http://hamiltonlima.com/posts/virtualbox-with-static-and-dynamic-ip/</link><pubDate>Sat, 07 Apr 2018 14:49:50 +0000</pubDate><guid>http://hamiltonlima.com/posts/virtualbox-with-static-and-dynamic-ip/</guid><description>While installing docker on my windows 10 machine I found that Docker for Windows requires 64-bit Windows 10 Pro with Hyper-V available, what? omg, I was expecting something simple&amp;hellip; but NISBEIP, let&amp;rsquo;s move on. Tried to use the Docker Toolbox that didn&amp;rsquo;t work as smooth as I expected. After some hours banging my head against the wall I decided to create a Linux Virtual Machine using Virtualbox and use docker from there.</description><content type="html"><![CDATA[<p>While installing docker on my windows 10 machine I found that Docker for <a href="https://docs.docker.com/docker-for-windows/install/#what-to-know-before-you-install">Windows requires 64-bit Windows 10 Pro with Hyper-V available</a>, what? omg, I was expecting something simple&hellip; but NISBEIP, let&rsquo;s move on. Tried to use the Docker Toolbox that didn&rsquo;t work as smooth as I expected. After some hours banging my head against the wall I decided to create a Linux Virtual Machine using Virtualbox and use docker from there. But now here it comes the new challenge: How do I access the internet from the VM or even from the docker inside the VM and use a name to connect to it? I started to think about some crazy ideas</p>
<ul>
<li>Updatable Local DNS, Then I would need to setup my DNS use it, and keep track of a list of name and IP, and the VM would need to update me with the new IP, way too much work, no!</li>
<li>Setup the router DHCP to reserve an IP for that specific VM, not gonna work I will have lots of machines.</li>
<li>Access the machines with the IP address that I would need to check and write it down somewhere&hellip; NO!</li>
<li>Update hosts file everytime a new VM starts or is rebooted, OMG NO.</li>
</ul>
<p>Then <a href="https://www.youtube.com/watch?v=S7jD6nnYJy0&amp;t=329s">I saw a video</a> from <a href="https://www.youtube.com/channel/UCCezIgC97PvUuR4_gbFUs5g">Corey Schaffer</a> talking about a network of machines with VirtualBox, then the Aha moment happened: KEEP TWO NETWORK INTERFACES IN THE VM!! <img src="/images/2018/04/virtualbox-static-and-dynamic-ip.jpg" alt=""> Here are the oversimplified steps to do it:</p>
<ul>
<li>Create the new VM and install <a href="https://www.ubuntu.com/download/server">Ubuntu Server</a>, or clone an existing one.</li>
<li>At the VM Settings/Network keep TWO Adapters, first one Attached to Bridged Adapter, second one attached to Host-only Adapter, the second one will have the fixed IP</li>
<li>Log in to the machine and install OpenSSH - you will need to log in from the windows machine to your virtual machine, I find this easier than login using the VirtualBox screen, copy and paste there is a nightmare.</li>
<li>Setup the fixed IP for the Host-only network interface</li>
</ul>
<h2 id="setting-up-the-fixed-ip">Setting up the fixed IP</h2>
<p>Make sure the Host-only network interface doesn&rsquo;t have DHCP server activated and there is a fixed IP assigned to the host machine, check this at Virtual box menu, Host Network Manager, yes this one is tricky it&rsquo;s not a Virtual Machine setting, is a Virtualbox setting. <img src="/images/2018/04/virtualbox_host_network_manager.png" alt=""> Now that your Host-only network adapter is pretty much useless, let&rsquo;s make it usable by assigning an IP to the 192.168.56.X network. Using the <strong>ifconfig -a</strong> identify the interface name that doesn&rsquo;t have an IP assigned, mine was <strong>enp0s8.</strong> edit the file <strong>/etc/network/interfaces</strong> and add the following lines at the end</p>
<pre><code>auto enp0s8
iface enp0s8 inet static
address 192.168.56.100
netmask 255.255.255.0
</code></pre><p>restart your network service by using:</p>
<pre><code>sudo service networkìng restart
</code></pre><p>And now your Virtual machine is accessible thru the IP 192.168.56.100, add this to the hosts file at the windows machine and you can ssh to the machine that will have a fixed AND a dynamic IP from the Bridged network interface.</p>
]]></content></item><item><title>From counters to promises a javascript journey</title><link>http://hamiltonlima.com/posts/from-counters-to-promises-a-javascript-journey/</link><pubDate>Tue, 28 Feb 2017 13:21:21 +0000</pubDate><guid>http://hamiltonlima.com/posts/from-counters-to-promises-a-javascript-journey/</guid><description>Beauty always promises, but never gives anything. Simone Weil
Unlike beauty, javascript promises are faithful, and will be fulfilled&amp;hellip; unless someone rejects it :) If you ever need to load images using javascript or did anything that needs to wait until something is done, you probably used a promise, maybe even without noticing. I see Promises as a nice way to simplify the callback hell, but don&amp;rsquo;t be fooled, the callbacks are still there, they are only organized in a more simpler way.</description><content type="html"><![CDATA[<blockquote>
<p>Beauty always promises, but never gives anything. <a href="https://en.wikipedia.org/wiki/Simone_Weil">Simone Weil</a></p>
</blockquote>
<p>Unlike beauty, javascript promises are faithful, and will be fulfilled&hellip; unless someone rejects it :) If you ever need to load images using javascript or did anything that needs to wait until something is done, you probably used a promise, maybe even without noticing. I see Promises as a nice way to simplify the <a href="http://callbackhell.com">callback hell</a>, but don&rsquo;t be fooled, the callbacks are still there, they are only organized in a more simpler way. Let´s take a look at a simple example that loads one image. consider that &ldquo;foo&rdquo; variable is a canvas where we draw something in memory and we want to show that as an image.</p>
<pre><code>var promise = new Promise(function(resolve, reject) {   
    var image = new Image();
    image.onload = function() {
        resolve(image);
    }
    image.src = foo.toDataURL(&quot;image/png&quot;);
});
...
promise.then(function(data){
    myGreatImage = data;
});
</code></pre><p>The code above says: &ldquo;When I&rsquo;m done loading the image you can have it&rdquo;. the resolve function from the promise is calling the then implementation, don&rsquo;t tell anybody but there is a callback here&hellip; :) but with a nice name and a very readable structure.</p>
<h2 id="promises-on-robolucha-masks">Promises on robolucha masks</h2>
<p>During this weekend I finally add promises to the mask implementation of robolucha. The original implementation was handling image loading by counting the number of images loaded and with a ready method, but after the image loading the tint of the images and the mask building itself wasn&rsquo;t controlling the asynchronous nature of the operation, as a result of it, in Chrome it was working but at Firefox wasn&rsquo;t. The table below describes the features from the robolucha mask builder and the asynchronous challenges from each one.</p>
<table>
<thead>
<tr>
<th>Feature</th>
<th>Implementation</th>
<th>Challenge</th>
</tr>
</thead>
<tbody>
<tr>
<td>Base image loading</td>
<td>Add onload to each image and control the number of images loaded to track if the set of images are ready to be used</td>
<td>Wait for all the images to load</td>
</tr>
<tr>
<td>Mask building</td>
<td>Draw tinted images on a canvas and return the base64 image data as src of the resulting image</td>
<td>Wait for all layers to tint and after it wait for the mask to draw</td>
</tr>
<tr>
<td>Tint an image layer</td>
<td>Paint the black layer pixels with the chosen color</td>
<td>Wait for the layer to tint</td>
</tr>
</tbody>
</table>
<p>The great challenge was at the mask building where the code needed to wait for several promises to resolve and after that return a promise, so this is the implementation of the mask build.</p>
<pre><code>this.build = function(width, height, data) {
	
	var imagePromises = new Array();
	
	for (var i = 0; i &lt; data.length; i++) {
	    var layer = this.layers\[data\[i\].name\]; 
	    if (layer) {
		var rgb = this.hexToRgb(data\[i\].color);
		imagePromises.push(this.tint(this.findImageByName(data\[i\].name, data\[i\].element), 
                     rgb.red, rgb.green,rgb.blue));
	    }
	}
	
	var resultPromise = new Promise(function(resolve, reject) {
	    Promise.all(imagePromises).then(function(images) {
		var resultCanvas = document.createElement(&quot;canvas&quot;);
		resultCanvas.width = width;
		resultCanvas.height = height;
		var ctx = resultCanvas.getContext('2d');
		ctx.imageSmoothingEnabled = true;
		
		for (var i = 0; i &lt; data.length; i++) {
		    ctx.drawImage(images\[i\], 0, 0, width, height);
		}
		
		// return the base64 string of the image
		resolve(resultCanvas.toDataURL(&quot;image/png&quot;));
	    });
	});
	
	return resultPromise;
    }

</code></pre><p>Let&rsquo;s talk about some important steps on this code:</p>
<pre><code>imagePromises.push(this.tint(...
</code></pre><p>The &ldquo;tint&rdquo; function returns a promise that will be resolved when the image painting is done. We add to the list of promises that we are waiting for.</p>
<pre><code>var resultPromise = new Promise(function(resolve, reject) {
	    Promise.all(imagePromises).then(function(images) {...
</code></pre><p>The &ldquo;Promise.all&rdquo; function allow us to wait for a list of promises and do something at the &ldquo;then&rdquo; function, however, the parameter received at the function is the list of data each promise sends from &ldquo;resolve&rdquo; function. <img src="/images/2017/02/promises-image-to-promisse.all_.jpg" alt=""> With &ldquo;Promise.all&rdquo; I was able to solve one problem that was wait for several other promises, but now I had another one how to transform the result list in one result that should be a &ldquo;promise&rdquo; result? The solution I found was to create a new promise with &ldquo;Promise.all&rdquo; inside so the resolve function would be available.</p>
<pre><code>resolve(resultCanvas.toDataURL(&quot;image/png&quot;));
</code></pre><p>This resolve function is from the new promise, so when the &ldquo;then&rdquo; implementation of the &ldquo;Promise.all&rdquo; finished it will resolve this new promise sending the image as base64. If you know any other way around this, please let me know :)</p>
]]></content></item><item><title>beepify.io source code available</title><link>http://hamiltonlima.com/posts/beepify-io-source-code-available/</link><pubDate>Mon, 02 Jan 2017 22:21:50 +0000</pubDate><guid>http://hamiltonlima.com/posts/beepify-io-source-code-available/</guid><description>All the source code from the beepify posts is available at: https://github.com/hamilton-lima/beepify-server-playframework See the related posts:
beepify.io, server side - part 1 beepify.io, server side - part 2</description><content type="html"><![CDATA[<p>All the source code from the beepify posts is available at: <a href="https://github.com/hamilton-lima/beepify-server-playframework">https://github.com/hamilton-lima/beepify-server-playframework</a> See the related posts:</p>
<ul>
<li><a href="https://hamiltonlima.com/blog/beepify-io-server-side-release-1-part1/">beepify.io, server side - part 1</a></li>
<li><a href="https://hamiltonlima.com/blog/beepify-io-server-side-release-1-part-2/">beepify.io, server side - part 2</a></li>
</ul>
]]></content></item><item><title>Increase Ant Hibernate Junit tests Performance by 80%</title><link>http://hamiltonlima.com/posts/increase-ant-hibernate-junit-tests-performance-by-80/</link><pubDate>Tue, 27 Dec 2016 20:52:25 +0000</pubDate><guid>http://hamiltonlima.com/posts/increase-ant-hibernate-junit-tests-performance-by-80/</guid><description>If don´t want to read everything, just set forkingmode=&amp;ldquo;once&amp;rdquo; to have huge improvement in your tests processing time. :)
Now the details&amp;hellip; I have several, around 100 junit tests in Robolucha project, most of then use Hibernate and are run by an ant script. When you start Java Virtual machine Hibernate prepares itself to connect to the database by checking the necessary tables and preparing all the internals needed to work, but this process takes some time, some seconds to say the true.</description><content type="html"><![CDATA[<p><img src="/images/2016/12/performance_comparision_junit_ant_hibernate.png" alt=""> If don´t want to read everything, just set <strong>forkingmode=&ldquo;once&rdquo;</strong> to have huge improvement in your tests processing time. :)</p>
<h3 id="now-the-details">Now the details&hellip;</h3>
<p>I have several, around 100 junit tests in <a href="http://www.robolucha.com/">Robolucha</a> project, most of then use <a href="http://hibernate.org/orm/">Hibernate</a> and are run by an ant script. When you start Java Virtual machine Hibernate prepares itself to connect to the database by checking the necessary tables and preparing all the internals needed to work, but this process takes some time, some seconds to say the true. When you are running the unit tests and forking each process in a separated VM by using fork=&ldquo;yes&rdquo; the default behavior is to run one VM per test. With one VM per test, the result would be Hibernate running preparing its internals for each test, and the results are around 5 minutes as you can see at the table above. So reuse the Hibernate preparation was the main goal of the optimization but some other options were explored and some nice findings came from that. Here are the steps I did trying to optimize the test performance:</p>
<ul>
<li>Reuse Hibernate preparation</li>
<li>Use in Memory tables</li>
<li>Use MyISAM tables</li>
<li>Set hbm2ddl to none - no significant results from this one</li>
</ul>
<h3 id="reuse-hibernate-preparation">Reuse Hibernate preparation</h3>
<p>As you can see at <a href="https://ant.apache.org/manual/Tasks/junit.html">junit ant task documentation</a>, the default behavior for fork=yes is to set forkmode=&ldquo;perTest&rdquo;, and that was the main reason for the poor performance on my tests. set forkmode=&ldquo;once&rdquo; and only one VM will be created to the tests and Hibernate preparation will run only once, changing the times from around 5 minutes to one.</p>
<h3 id="use-different-types-of-tables">Use different types of tables</h3>
<p>InnoDB offers several nice features like referential integrity and so on, by there are other options with less features and much better performance, for the tests I tried to use then to check the performance, but it wasn´t that easy :) First I tried myISAM table tyble just changed the hibernate.dialect to <a href="http://grepcode.com/file/repo1.maven.org/maven2/org.hibernate/hibernate-core/4.3.6.Final/org/hibernate/dialect/MySQLMyISAMDialect.java#MySQLMyISAMDialect">org.hibernate.dialect.MySQLMyISAMDialect</a>, but sadly this class is using a wrong parameter at the method <a href="http://grepcode.com/file/repo1.maven.org/maven2/org.hibernate/hibernate-core/4.3.6.Final/org/hibernate/dialect/Dialect.java#Dialect.getTableTypeString%28%29" title="Overrides org.hibernate.dialect.Dialect.getTableTypeString()">getTableTypeString</a>(), its returning <strong>type=MyISAM</strong> where it should be: <strong>ENGINE=MyISAM</strong>, So in order to fix it I extended MySQL5InnoDBDialect by overriding getTableTypeString()</p>
<pre><code>public class **MySQL5MyISAMDBDialectEngine** extends MySQL5InnoDBDialect {

  public MySQL5MyISAMDBDialectEngine() {
    super();
  }

  @Override
  public String getTableTypeString() {
    return &quot; ENGINE=MyISAM&quot;;
  }
}
</code></pre><p>Used a similar strategy for the in memory tables, with an extra detail that in <a href="http://dev.mysql.com/doc/refman/5.7/en/memory-storage-engine.html">Memory table DON´T support BLOB types</a>, so I need to create a custom mapping for large strings to use VARCHAR(1024) instead of BLOB.</p>
<pre><code>public class **MySQL5InnoDBDialectInMemory** extends MySQL5InnoDBDialect {

  public MySQL5InnoDBDialectInMemory() {
    super();
  }

  @Override
  public String getTableTypeString() {
    return &quot; ENGINE=MEMORY&quot;;
  }

 /\*\*
  \* avoid LONGTEXT that are not supported by In Memory tables
  \*/
  @Override
  protected void registerVarcharTypes() {
    registerColumnType(Types.VARCHAR, &quot;varchar(1024)&quot;);
    registerColumnType(Types.VARCHAR, 255, &quot;varchar($l)&quot;);
    registerColumnType(Types.LONGVARCHAR, &quot;varchar(1024)&quot;);
  }
}
</code></pre><h3 id="conclusion">Conclusion</h3>
<p>After all the tests my final configuration is:</p>
<ul>
<li>junit fork=&ldquo;yes&rdquo; forkmode=&ldquo;once&rdquo;</li>
<li>hbm2ddl=update</li>
<li>hibernate.dialect=com.robolucha.test.MySQL5MyISAMDBDialectEngine</li>
</ul>
<p>Forcing the use of only one VM for all the tests, checking if all the necessary tables are in place, as this dont take that much time and using myISAM tables that has almost the same performance as in Memory but uses less memory.</p>
]]></content></item><item><title>Holidays selfhackaton - the start</title><link>http://hamiltonlima.com/posts/holidays-selfhackaton-the-start/</link><pubDate>Mon, 26 Dec 2016 15:46:53 +0000</pubDate><guid>http://hamiltonlima.com/posts/holidays-selfhackaton-the-start/</guid><description>[caption id=&amp;ldquo;attachment_110&amp;rdquo; align=&amp;ldquo;alignnone&amp;rdquo; width=&amp;ldquo;800&amp;rdquo;]The selfhackaton plan![/caption] During this holidays celebration week, I will join myself in a hackaton! Me myself and I will code several new features to Robolucha. The image above shows the sprint meeting board, when my stakeholder, a.k.a. wife forced me to define priorities and a clear order of what to deliver during this week :) Translating the characters above for something more understandable, here is the list:</description><content type="html"><![CDATA[<p>[caption id=&ldquo;attachment_110&rdquo; align=&ldquo;alignnone&rdquo; width=&ldquo;800&rdquo;]<img src="/images/2016/12/selfhackaton-dec2016.jpg" alt=""> The selfhackaton plan![/caption] During this holidays celebration week, I will join myself in a hackaton! Me myself and I will code several new features to <a href="http://www.robolucha.com">Robolucha</a>. The image above shows the sprint meeting board, when my stakeholder, a.k.a. wife forced me to define priorities and a clear order of what to deliver during this week :) Translating the characters above for something more understandable, here is the list:</p>
<ul>
<li>post about the selfhackaton itself describing the goals (done)</li>
<li>merge move() and turn() methods in only one command queue so the commands are not executed in parallel</li>
<li>rename start/repeat methods to setup/loop adopting &ldquo;arduino-like&rdquo; names</li>
<li>post about the ant &amp; hibernate unit tests optimization</li>
<li>convert robolucha game presentation layer, the arena itself, to an angular component</li>
<li>create the first version of the map editor using the new presentation layer</li>
<li>add obstacles to the map editor</li>
<li>create the server API to use in map editor elements</li>
<li>create new games using the new map editor definitions</li>
</ul>
<p>Let´s code!</p>
]]></content></item><item><title>Manage your machine with Jenkins</title><link>http://hamiltonlima.com/posts/manage-your-machine-with-jenkins/</link><pubDate>Tue, 20 Dec 2016 19:40:32 +0000</pubDate><guid>http://hamiltonlima.com/posts/manage-your-machine-with-jenkins/</guid><description>On these days when Zuckberg is feeling like iron man, @see building Jarvis, I want to share a more modest automation :) Manage your machine with Jenkins the powerfull build tool. Jenkins was created to automate builds and any sort of workflows after developers send their code to the server, so it&amp;rsquo;s able to automate virtually anything, and that what I did used it on my own machine to automate some tasks:</description><content type="html"><![CDATA[<p>On these days when Zuckberg is feeling like iron man, <a href="https://www.facebook.com/notes/mark-zuckerberg/building-jarvis/10154361492931634">@see building Jarvis</a>, I want to share a more modest automation :) Manage your machine with <a href="https://jenkins.io/">Jenkins</a> the powerfull build tool. Jenkins was created to automate builds and any sort of workflows after developers send their code to the server, so it&rsquo;s able to automate virtually anything, and that what I did used it on my own machine to automate some tasks:</p>
<ul>
<li>Remove some help files that the login script creates every single day on my desktop (yes I don&rsquo;t like any icons on my desktop)</li>
<li>Make a <a href="https://en.wikipedia.org/wiki/Differential_backup">differential backup</a> from my documents folder</li>
</ul>
<p>The steps are pretty simple: Install Jenkins, add projects &amp; test, schedule, done.</p>
<h3 id="the-installation">The installation</h3>
<p>Jenkins installs as a service at windows, using only 4Mb of memory, starts and stops in some seconds, and offers a nice web admin interface. Just follow the install steps, copy the token data from the install file, and you are good to go. As we will use <a href="http://ant.apache.org/">apache ant</a> to write our scripts we will need to install it as well. Just <a href="http://ant.apache.org/bindownload.cgi">download the the zip version</a>, unzip and add the ant <strong>bin</strong> folder to the path. mine is at : C:\app\apache-ant-1.9.7\bin</p>
<h3 id="add-projects">Add projects</h3>
<p>For each of my automation needs I will add a separated Project on Jenkins, and each one will have a build step to run a ant script. So I will use one ant script for each task I want to acomplish. Use the option <strong>add new Item</strong>, choose <strong>FreeStyle project</strong> and click ok. <img src="/images/2016/12/jenkins-add-new-job.png" alt=""> Now we setup what the job will do on <strong>Build</strong> option, choose <strong>Add build Step</strong> and pick <strong>Invoke Ant</strong> option. After that enter the ant file name on the option Build file. <img src="/images/2016/12/jenkins-set-ant-build-file.png" alt=""> This is the ant file I am using for the backup</p>
<pre><code>&lt;project name=&quot;backup&quot; default=&quot;main&quot; basedir=&quot;.&quot;&gt;
   &lt;description&gt;full backup&lt;/description&gt;

   &lt;target name=&quot;main&quot;&gt;
      &lt;copy todir=&quot;g:\\backup2016\\Documents&quot; 
         verbose=&quot;yes&quot; failonerror=&quot;false&quot; 
         preservelastmodified=&quot;yes&quot; force=&quot;yes&quot;&gt;

         &lt;fileset dir=&quot;C:\\Users\\hamilton\\Documents&quot;/&gt;
      &lt;/copy&gt;
   &lt;/target&gt;

&lt;/project&gt;
</code></pre><p>See more details on ant tasks here: <a href="https://ant.apache.org/manual/tasksoverview.html">ant.apache.org/manual/tasksoverview.html</a></p>
<blockquote>
<p>If you don&rsquo;t add the <strong>failonerror=false</strong> and the backup starts when you using a file, the entire backup process will fail, using this it will fail only for your file.</p>
</blockquote>
<p>After that is saved you can test your job by navigating to the main jenkins interface and clicking to schdule a build for your new job. <img src="/images/2016/12/jenkins-schedule-now.png" alt=""> Every run of the job, will be a link to the job run details, as you can see in the last failure column of the image with #1. When you click on the the details choose the console output option, that will show the results of the ant execution. <img src="/images/2016/12/jenkins-console-output.png" alt=""></p>
<h3 id="schedule-your-jobs">Schedule your jobs</h3>
<p>Click on the job, choose the <strong>Configure</strong> option and <strong>Buid triggers</strong>, after that select <strong>Build periodically</strong>, and enter the magic crontab style string. If you click on the little help button there is very detailed help on how to write the scheduling string, for each hour I am using:</p>
<pre><code>H \* \* \* \*
</code></pre><p>Just save and you good to go.</p>
]]></content></item><item><title>Robolucha mask editor</title><link>http://hamiltonlima.com/posts/robolucha-mask-editor/</link><pubDate>Mon, 21 Nov 2016 22:35:39 +0000</pubDate><guid>http://hamiltonlima.com/posts/robolucha-mask-editor/</guid><description>Today Robolucha was updated including the mask editor, where you can customize your luchador mask, and see it in the arena! You can change colors and forms for several different layers, give a try and show your creativity with new cool masks for your luchador. Try the new mask editor here: http://ring.robolucha.com If you don´t know robolucha, it is a fantastic game I created where you can code your &amp;ldquo;luchadores&amp;rdquo; using javascript and battle in an arena with your friends.</description><content type="html"><![CDATA[<p><img src="/images/2016/11/2016-11-21_2014.png" alt="robolucha mask editor"> Today <a href="http://www.robolucha.com">Robolucha</a> was updated including the mask editor, where you can customize your luchador mask, and see it in the arena! You can change colors and forms for several different layers, give a try and show your creativity with new cool masks for your luchador. Try the new mask editor here: <a href="http://ring.robolucha.com">http://ring.robolucha.com</a> If you don´t know robolucha, it is a fantastic game I created where you can code your &ldquo;luchadores&rdquo; using javascript and battle in an arena with your friends.</p>
]]></content></item><item><title>Avoid murphy with Amazon S3</title><link>http://hamiltonlima.com/posts/avoid-murphy-with-amazon-s3/</link><pubDate>Wed, 02 Nov 2016 02:21:15 +0000</pubDate><guid>http://hamiltonlima.com/posts/avoid-murphy-with-amazon-s3/</guid><description>Backups are like life insurance, you allways will be sorry if you don´t have when you need it. That&amp;rsquo;s why I am sharing this step by step way to backup your application or site or wherever you have in production.
Preparing the vault, a.k.a. Amazon S3 I decided to store my backups on Amazon S3 service, because is cheap, around USD0,03 per GB, and very simple to store and to retrieve the data.</description><content type="html"><![CDATA[<p><img src="/images/2016/11/photo-1462045504115-6c1d931f07d1.jpg" alt="photo-1462045504115-6c1d931f07d1"> Backups are like life insurance, you allways will be sorry if you don´t have when you need it. That&rsquo;s why I am sharing this step by step way to backup your application or site or wherever you have in production.</p>
<h3 id="preparing-the-vault-aka-amazon-s3">Preparing the vault, a.k.a. Amazon S3</h3>
<p>I decided to store my backups on Amazon S3 service, because is <a href="https://aws.amazon.com/s3/pricing/">cheap</a>, around USD0,03 per GB, and very simple to store and to retrieve the data. My first step to try to mount an remote amazon s3 storage as a linux folder at the server, lost some hours trying to make it work, but luckly found enlighment from one comment at stackoverflow: DON&rsquo;T USE IT :) seriously run from it! After been healed from the mount sickness, I just downloaded the <a href="http://docs.aws.amazon.com/cli/latest/reference/s3/index.html#cli-aws-s3">Amazon Webservice command line tools</a> and everything run smoothly! But as I allways say: Nothing is simple, but everything is possible. The process has several small steps to follow, most of then you only do it once, So this are the steps you need to do at amazon to prepare your backup storage:</p>
<ul>
<li>Create you amazon S3 account - <a href="https://aws.amazon.com/free">https://aws.amazon.com/free</a></li>
<li><a href="https://console.aws.amazon.com/s3/home?region=us-east-1">Create a bucket</a> to save your data</li>
<li><a href="https://console.aws.amazon.com/iam/home?region=us-east-1#users">Create a user</a> to be access your bucket</li>
<li>Save the new user access key and secret, you will need it to setup your server</li>
<li>Give the new user the proper rights to your bucket</li>
</ul>
<p>Most of the steps are just click click and click. Give the proper rights to your new user require more setup. The idea is to <a href="https://console.aws.amazon.com/iam/home?region=us-east-1#policies">create a policy</a> and attach an user to it, and the policy has a well defined JSON format, yes a JSON format, <a href="http://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_elements.html">with lots and lots of options</a>. You can do cool stuff like filter by IP, give rights during some period of time and several other cool features. I used the most simple rights: right to read the bucket and the right to create objects in the bucket, this is the policy description I used:</p>
<pre><code>{
    &quot;Version&quot;: &quot;2012-10-17&quot;,
    &quot;Statement&quot;: \[
        {
            &quot;Action&quot;: \[
                &quot;s3:ListBucket&quot;,
                &quot;s3:GetBucketLocation&quot;
            \],
            &quot;Effect&quot;: &quot;Allow&quot;,
            &quot;Resource&quot;: &quot;arn:aws:s3:::bucketname&quot;
        },
        {
            &quot;Action&quot;: &quot;s3:\*&quot;,
            &quot;Effect&quot;: &quot;Allow&quot;,
            &quot;Resource&quot;: &quot;arn:aws:s3:::bucketname/\*&quot;
        }
    \]
}
</code></pre><p>I took me some time to realize that we need two statements in the policy description: Allow ListBucket and GetBucketLocation to the bucket and other to allow all actions to the bucket files, attention to the diference: bucketname vs bucketname/*</p>
<h3 id="installing-awscli">Installing AWS CLI</h3>
<p>The installation process is just install, add the access key and secret and test your setup, here are the steps:</p>
<pre><code>apt install awscli
aws configure
cat ~/.aws/credentials
</code></pre><p>After that you can use the aws command line interface, here are some samples:</p>
<p>aws s3 ls s3://bucketname</p>
<p>list the existing files in the bucket</p>
<p>aws s3 cp myfolder s3://bucketname/myfolder &ndash;recursive</p>
<p>copy myfolder recursively to s3</p>
<p>see all commands here : <a href="http://docs.aws.amazon.com/cli/latest/reference/s3/index.html#cli-aws-s3">http://docs.aws.amazon.com/cli/latest/reference/s3/index.html#cli-aws-s3</a></p>
<h3 id="the-backup-script">The backup script</h3>
<p>Now that we have aws installed and the vault ready, let&rsquo;s talk about the backup script, first what if should do:</p>
<ul>
<li>save database dump with the timestamp on the file name</li>
<li>copy all the files from the nodejs application</li>
<li>copy all the files from wordpress</li>
<li>copy all the files from the static content</li>
<li>upload the content to Amazon S3</li>
</ul>
<p>So the following script is doing all of it:</p>
<pre><code>#!/bin/sh
# get the current timestamp
NOW=&quot;$(date +&quot;%Y%m%d\_%H%M%S\_%N&quot;)&quot;
TODAY=&quot;$(date +&quot;%Y%m%d&quot;)&quot;

# create the backup folder
mkdir /tmp/bkp\_$NOW
mkdir /tmp/$TODAY

# dump database data
mysqldump --complete-insert --no-set-names --host=127.0.0.1 --user=backup\_uzr --password=XXXX wordpress &gt; /tmp/bkp\_$NOW/wordpress.sql
mysqldump --complete-insert --no-set-names --host=127.0.0.1 --user=backup\_uzr --password=XXXX beepify &gt; /tmp/bkp\_$NOW/beepify.sql

# copy folders to backup folder
cp -r /var/www/html /tmp/bkp\_$NOW
cp -r /var/www/portfolio /tmp/bkp\_$NOW
cp -r /var/www/vanhackaton-video-editor /tmp/bkp\_$NOW

# zip each file or folder to zip\_ folder
cd /tmp/bkp\_$NOW/
for dir in $(ls); do tar cvzf /tmp/$TODAY/${dir}\_$NOW.tar.gz ${dir}; done

# copy zipped backup files and folders to amazon S3
aws s3 cp /tmp/$TODAY s3://bucketname/$TODAY --recursive

# remove the temporary folders
echo &quot;removing /tmp/bkp\_$NOW and /tmp/$TODAY&quot;
rm -rf /tmp/bkp\_$NOW
rm -rf /tmp/$TODAY
</code></pre><p>Now let&rsquo;s comment some important parts of this script:</p>
<pre><code>TODAY=&quot;$(date +&quot;%Y%m%d&quot;)&quot;
</code></pre><p>It creates an environment variable with the result of the execution of the command date with the Ymd format, the equivalent is done on NOW.</p>
<pre><code>mysqldump --complete-insert --no-set-names --host=127.0.0.1 --user=backup\_uzr --password=XXXX wordpress &gt; /tmp/bkp\_$NOW/wordpress.sql
</code></pre><p>Note that we are using the password in the command line, so there one security issue here, in order to minimize this I created an read only user at the mysql database, with the following commands, that should be executed at msyql console</p>
<pre><code>GRANT SELECT, LOCK TABLES ON \*.\* TO backup\_uzr@127.0.0.1 IDENTIFIED BY 'XXXX'; 
GRANT SELECT, LOCK TABLES ON \*.\* TO backup\_uzr@localhost IDENTIFIED BY 'XXXX'; 
flush privileges;
</code></pre><p>After all the files are copied in different folders at /tmp/bkp_$NOW we run this magic command</p>
<pre><code>for dir in $(ls); do tar cvzf /tmp/$TODAY/${dir}\_$NOW.tar.gz ${dir}; done
</code></pre><p>That can be split as follow:</p>
<ul>
<li>iterate over the result list from the command ls</li>
<li>for each element on that list set the value to the variable dir</li>
<li>execute a tar command creating a tar.gz file at the /tmp/$TODAY folder zipping the content of the variable dir</li>
</ul>
<p>After that run the aws cli command to push the results to the S3 In order to schedule the script use the command: crontab -e and add the line to run every dy at 04:42 AM</p>
<pre><code>42 4 \* \* \* /root/my-nice-backup-script.sh
</code></pre><p>Have fun backuping up your sites!</p>
]]></content></item><item><title>Best project for the challenge at vanhackathon</title><link>http://hamiltonlima.com/posts/best-project-for-the-challenge-at-vanhackathon/</link><pubDate>Sun, 30 Oct 2016 14:03:32 +0000</pubDate><guid>http://hamiltonlima.com/posts/best-project-for-the-challenge-at-vanhackathon/</guid><description>Last Friday night, I got one of the best news in weeks, my video-editor project was choosen as the Best project for the challenge: Choose your Own Adventure Video Builder! It feels very good when you see a great technical team from www.thinkific.com recognizing your effort and results, thanks for the good news Nick Schwinghamer, thanks for the Vanhackathon organization Ilya Brotzky!</description><content type="html"><![CDATA[<p>Last Friday night, I got one of the best news in weeks, <a href="https://github.com/hamilton-lima/vanhackaton-video-editor">my video-editor project</a> was choosen as the <strong>Best project for the challenge: Choose your Own Adventure Video Builder</strong>! <img src="/images/2016/10/2016-10-30_1145.png" alt="2016-10-30_1145"> It feels very good when you see a great technical team from <a href="https://www.thinkific.com">www.thinkific.com</a> recognizing your effort and results, thanks for the good news <a href="https://twitter.com/nicktheschwing">Nick Schwinghamer</a>, thanks for the Vanhackathon organization <a href="https://twitter.com/ilyabrotzky">Ilya Brotzky</a>!</p>
]]></content></item><item><title>Closing github issues on commit</title><link>http://hamiltonlima.com/posts/closing-github-issues-on-commit/</link><pubDate>Sat, 29 Oct 2016 19:13:14 +0000</pubDate><guid>http://hamiltonlima.com/posts/closing-github-issues-on-commit/</guid><description>There is no better place to keep track of opensource projects issues, than the issues page at github :) like this one: https://github.com/hamilton-lima/vanhackaton-video-editor/issues And as expected there is an automated way to close the issues with comments from your commit messages. You can use several key words for that as github documentation explains here: https://help.github.com/articles/closing-issues-via-commit-messages/, can be: close, closes, closed, fix, fixes, fixed, resolve, resolves, resolved. To fix #4 &amp;amp; #6 I used the following commit message:</description><content type="html"><![CDATA[<p>There is no better place to keep track of opensource projects issues, than the issues page at github :) like this one: <a href="https://github.com/hamilton-lima/vanhackaton-video-editor/issues">https://github.com/hamilton-lima/vanhackaton-video-editor/issues</a> And as expected there is an automated way to close the issues with comments from your commit messages. You can use several key words for that as github documentation explains here: <a href="https://help.github.com/articles/closing-issues-via-commit-messages/">https://help.github.com/articles/closing-issues-via-commit-messages/</a>, can be: close, closes, closed, fix, fixes, fixed, resolve, resolves, resolved. To fix #4 &amp; #6 I used the following commit message:</p>
<blockquote>
<p>This closes #4, closes #6</p>
</blockquote>
<p>It looks human readable and closes the issues as well, pretty good isn&rsquo;t it ? <img src="/images/2016/10/2016-10-29_1705.png" alt="2016-10-29_1705"></p>
]]></content></item><item><title>Vanhackton - Lessons Learned</title><link>http://hamiltonlima.com/posts/vanhackton-lessons-learned/</link><pubDate>Wed, 26 Oct 2016 23:00:17 +0000</pubDate><guid>http://hamiltonlima.com/posts/vanhackton-lessons-learned/</guid><description>After a very intense weekend I feel like coming from the battle :) But it feels very good to deliver a good result in such a small timeframe. On this post I will describe some lessons learned from the past weekend and some decisions I made that worth.
POC - the start For every project, I allways plan for proof of concepts, small implementations that isolate the implementation complexity by implementing just the necessary, to solve one problem.</description><content type="html"><![CDATA[<p><img src="/images/2016/10/2014-06-22-18.26.36.png" alt="National Monument at Kuala Lumpur, Malaysia"> After a very intense weekend I feel like coming from the battle :) But it feels very good to deliver a good result in such a small timeframe. On this post I will describe some lessons learned from the past weekend and some decisions I made that worth.</p>
<h2 id="poc---the-start">POC - the start</h2>
<p>For every project, I allways plan for proof of concepts, small implementations that isolate the implementation complexity by implementing just the necessary, to solve one problem. On this case the problem to solve was:</p>
<blockquote>
<p>How to show a DIV over the youtube video</p>
</blockquote>
<p>One mistake that I believe I made was that during the research of existing solutions, I only evaluated the UI itself, didn´t look at the page source code to check how they did it. That result in some extra hours to understand how to do it and to implement it. End of the day it worked fine, but it would be better if I read that source codes :) See <a href="https://github.com/hamilton-lima/vanhackaton-video-editor/blob/master/server/client/css/index.css">index.css</a> at #video and #video #questions about the solution used to show the div over the video.</p>
<h2 id="the-timeline-control">The timeline control</h2>
<p><img src="/images/2016/10/2016-10-26_2011.png" alt="2016-10-26_2011"> The timeline control was a tricky part of the implementation, first I created a div for the white background, then small blue divs over it at the proportional position to show the question timeline. Everything was going until the moment that I felt like I need to drag those divs to change the question second. After trying a lot to use <a href="http://api.jqueryui.com/draggable/#option-containment">dragable()</a> I wasn´t able to make it work inside the div with &ldquo;position: absolute&rdquo;. So I changed plans and created a <a href="http://www.createjs.com/easeljs">EaseJS</a> <a href="http://www.createjs.com/docs/easeljs/classes/Stage.html">stage</a> to draw the timeline and allow the user to drag it and change the question second by dragging it. I know that I should have a little message pushing the user to drag it, or at least change the cursor to indicate that the timeline bars are dragable, but this I realize after everything is finished :) To see the timeline implementation, look for it at <a href="https://github.com/hamilton-lima/vanhackaton-video-editor/blob/master/server/client/app/app.js">app.js</a> at the directive &ldquo;draggableTimeline&rdquo;, that of course should be in a separated file.</p>
<h2 id="the-database-choice">The database choice</h2>
<p>My first option was to save all the data in flat files, using folders to separate the stories for each user, and to keep one master pointing for the files in the folders, but I drop this idea really quick, when I start to remember how flat files handling can be a pain, specially about zombie processes locking files. So instead of going in the direction of setting an <a href="http://nosql-database.org/">NoSQL DB</a>, or an relational like <a href="https://www.mysql.com/">Mysql</a> or <a href="https://www.postgresql.org/">Postgres</a>, I decided to keep it as simple as possible by going with <a href="https://sqlite.org/">SQLLite</a>. That decision saved me some hours of handling issues like: server setup, user creation, access rights. Everything was plain simple. It was just a matter of write a code to create the table, and some code to save data, yes plain INSERTs, and read data when need, using plain SQL. One main improvement that I can see from the implementation is to separate the database access details in a separated component, So it would be easier to plug other database imeplemention without changing everything. One detail that I believe it worth highlight is that the query function are asynchronous, I gave a try on some implementations using <a href="https://github.com/kriasoft/node-sqlite">Promisses over SQLLite</a>, but I didn&rsquo;t like the syntax at all, It looks confusing to me the end result, this could be result of my stress during the weekend, or quick judgement to avoid potential risks. End of the day <a href="https://github.com/hamilton-lima/vanhackaton-video-editor/blob/master/server/index.js">implemented a simple solution to handle it.</a></p>
<pre><code>app.get('/api/story/:id', function (req, res) {
	var msg = 'get story from id: ' + req.params.id;
	console.log(msg);

	var result = db.all('SELECT \* FROM story WHERE id = ? ', req.params.id, 
	**function(err,rows){**
		if(err){
			console.log('error: ', err );
  			**res.status(500).send({ error: err });**
  			return;
  		}

		console.log(JSON.stringify(rows));
		res.json(rows);
	});
});
</code></pre><p>In this fragment of code there is a pitfall, that got me several times, that is to forget the return; just after the .status(500).send(&hellip;), I know that the send() method does not end the the function, but somewhere in my brain that line is wired as final, because we literally cannot send anything else as result after that.</p>
<h2 id="components-hall-of-fame">Components Hall of fame</h2>
<p>These are the shiny little guys that made my life easier!</p>
<h3 id="client-side">Client side</h3>
<ul>
<li>Youtube player API <a href="https://developers.google.com/youtube/iframe_api_reference#Playback_controls">https://developers.google.com/youtube/iframe_api_reference#Playback_controls</a></li>
<li>Angular youtube component <a href="https://github.com/brandly/angular-youtube-embed">https://github.com/brandly/angular-youtube-embed</a></li>
<li>Number format (seconds to hour:minute) just lovely &lt;3 <a href="http://numeraljs.com/">http://numeraljs.com/</a></li>
<li>Angular inline edit <a href="https://github.com/tameraydin/ng-inline-edit">https://github.com/tameraydin/ng-inline-edit</a></li>
<li>Angular scroll <a href="https://github.com/oblador/angular-scroll/">https://github.com/oblador/angular-scroll/</a></li>
<li>Angular UI bootstrap <a href="https://angular-ui.github.io/bootstrap/">https://angular-ui.github.io/bootstrap/</a></li>
</ul>
<h3 id="server-side">Server side</h3>
<ul>
<li>Install express routing <a href="https://expressjs.com/en/starter/installing.html">https://expressjs.com/en/starter/installing.html</a></li>
<li>Install sqllite3 <a href="https://www.npmjs.com/package/sqlite3">https://www.npmjs.com/package/sqlite3</a> Examples using sqllite3 <a href="http://blog.modulus.io/nodejs-and-sqlite">http://blog.modulus.io/nodejs-and-sqlite</a></li>
<li>Install body parser (don´t forget this one) <a href="https://github.com/expressjs/body-parser">https://github.com/expressjs/body-parser</a></li>
<li>Sqllite navigator <a href="http://sqlitebrowser.org/">http://sqlitebrowser.org/</a> Icons Used as favicon one icon made by <a href="http://www.flaticon.com/authors/madebyoliver">Madebyoliver</a> from <a href="http://www.flaticon.com">http://www.flaticon.com</a> Licensed by <a href="http://creativecommons.org/licenses/by/3.0">http://creativecommons.org/licenses/by/3.0</a>/</li>
</ul>
<h2 id="projectlinks">Project Links</h2>
<ul>
<li>Project pitch: <a href="https://youtu.be/Wx09vx0tZd0">https://youtu.be/Wx09vx0tZd0</a></li>
<li>Live demo: <a href="http://hamiltonlima.com:3000">http://hamiltonlima.com:3000</a></li>
<li>Source code: <a href="https://github.com/hamilton-lima/vanhackaton-video-editor">https://github.com/hamilton-lima/vanhackaton-video-editor</a></li>
<li>Project pitch in portuguese: <a href="https://www.youtube.com/watch?v=vcZZ0uiL2Ns">https://www.youtube.com/watch?v=vcZZ0uiL2Ns</a></li>
</ul>
<h2 id="vote">Vote</h2>
<p>If you like the project, goto to the url bellow and click on WANT to vote for it. <a href="https://wantoo.io/vanhackathon/5561/video-editor/">https://wantoo.io/vanhackathon/5561/video-editor/</a> <a href="https://wantoo.io/vanhackathon/5561/video-editor/"><img src="/images/2016/10/vote.jpg" alt="vote"></a></p>
]]></content></item><item><title>Vanhackton final submission</title><link>http://hamiltonlima.com/posts/vanhackton-final-submission/</link><pubDate>Sun, 23 Oct 2016 22:03:33 +0000</pubDate><guid>http://hamiltonlima.com/posts/vanhackton-final-submission/</guid><description>Final submission!!! last minutes!!!</description><content type="html">&lt;p>Final submission!!! last minutes!!!&lt;/p></content></item><item><title>Vanhackaton status 2</title><link>http://hamiltonlima.com/posts/vanhackaton-status-2/</link><pubDate>Sun, 23 Oct 2016 00:38:18 +0000</pubDate><guid>http://hamiltonlima.com/posts/vanhackaton-status-2/</guid><description>Today was a very productive day!! tons of nice features add to the editor:
Converted all the javascript code to run inside an Angular application Create the UI to edit the questions, with add and remove Created the timeline that shows each question position in the video Created backend using node.js and SQLLite Add inline edit to the story title and questions Scroll to the question when clicks on the timeline marker Monitor the execution of the video and pause for the question, tracking the answer in the edit mode Getting close to the first usable version!</description><content type="html"><![CDATA[<p><img src="/images/2016/10/2016-10-22_2225.png" alt="2016-10-22_2225"> Today was a very productive day!! tons of nice features add to the editor:</p>
<ul>
<li>Converted all the javascript code to run inside an Angular application</li>
<li>Create the UI to edit the questions, with add and remove</li>
<li>Created the timeline that shows each question position in the video</li>
<li>Created backend using node.js and SQLLite</li>
<li>Add inline edit to the story title and questions</li>
<li>Scroll to the question when clicks on the timeline marker</li>
<li>Monitor the execution of the video and pause for the question, tracking the answer in the edit mode</li>
</ul>
<p>Getting close to the first usable version! next steps:</p>
<ul>
<li>Play the story in separated page</li>
<li>&ldquo;Login&rdquo; on the first page by entering the email</li>
<li>Replace the save button by calls to save on any changes made to the story</li>
<li>Deploy to a server</li>
</ul>
]]></content></item><item><title>Vanhackaton food &amp; desktop</title><link>http://hamiltonlima.com/posts/vanhackaton-food-desktop/</link><pubDate>Sat, 22 Oct 2016 11:24:35 +0000</pubDate><guid>http://hamiltonlima.com/posts/vanhackaton-food-desktop/</guid><description>There is tradition that I learn at LudumDare, publish pictures of your food and desktop while in the hackaton!</description><content type="html"><![CDATA[<p>There is tradition that I learn at <a href="http://ludumdare.com/compo/tag/food/">LudumDare</a>, publish pictures of your food and desktop while in the hackaton! <img src="/images/2016/10/2016-10-21-21.07.20.jpg" alt="food "> <img src="/images/2016/10/2016-10-22-01.29.25.jpg" alt="Jpeg"> <img src="/images/2016/10/2016-10-22-09.06.45.jpg" alt="Jpeg"></p>
]]></content></item><item><title>Vanhackton status 1</title><link>http://hamiltonlima.com/posts/vanhackton-status-1/</link><pubDate>Sat, 22 Oct 2016 11:20:44 +0000</pubDate><guid>http://hamiltonlima.com/posts/vanhackton-status-1/</guid><description>First proof of concept is done! I choose the challenge to build and interactive video editor that will creae layers over existing videos, nice challenge btw :) Technical details that are in this status:
Load video player on the fly Add and remove questions layer over the video Pause and Play the video Forward the video x amount of seconds Monitor what is the current position of the video Now its time for next steps:</description><content type="html"><![CDATA[<p><img src="/images/2016/10/2016-10-22_0112.png" alt="2016-10-22_0112"> First proof of concept is done! I choose the challenge to build and interactive video editor that will creae layers over existing videos, nice challenge btw :) Technical details that are in this status:</p>
<ul>
<li>Load video player on the fly</li>
<li>Add and remove questions layer over the video</li>
<li>Pause and Play the video</li>
<li>Forward the video x amount of seconds</li>
<li>Monitor what is the current position of the video</li>
</ul>
<p>Now its time for next steps:</p>
<ul>
<li>Add angular to the application</li>
<li>Create the UI to add the questions</li>
<li>Create a timeline interface</li>
<li>Save and load story with the questions</li>
<li>Play the story</li>
</ul>
<p>Go go go!</p>
]]></content></item><item><title>Vanhackaton is about to start</title><link>http://hamiltonlima.com/posts/vanhackaton-is-about-to-start/</link><pubDate>Fri, 21 Oct 2016 20:42:36 +0000</pubDate><guid>http://hamiltonlima.com/posts/vanhackaton-is-about-to-start/</guid><description>Vanhackaton is about to start, get ready!!</description><content type="html"><![CDATA[<p><img src="/images/2016/10/2016-10-21-18.26.04.jpg" alt="get ready">
<a href="https://www.vanhack.com/hackathon/">Vanhackaton</a> is about to start, get ready!!</p>
]]></content></item><item><title>CORS is your friend</title><link>http://hamiltonlima.com/posts/cors-is-your-friend/</link><pubDate>Wed, 19 Oct 2016 23:36:58 +0000</pubDate><guid>http://hamiltonlima.com/posts/cors-is-your-friend/</guid><description>As soon we started to test the integration of the server side with the mobile application we found out that we were missing one little detail
Enable Cross Origin Resource Sharing!
Those beatiful words means: We sould tell the server to allow other servers to call our services :) As we are not doing any kind of authentication we should let any server make the calls. So we just went to http://enable-cors.</description><content type="html"><![CDATA[<p>As soon we started to test the integration of the server side with the mobile application we found out that we were missing one little detail</p>
<blockquote>
<p>Enable Cross Origin Resource Sharing!</p>
</blockquote>
<p>Those beatiful words means: We sould tell the server to allow other servers to call our services :) As we are not doing any kind of authentication we should let any server make the calls. So we just went to <a href="http://enable-cors.org/server.html">http://enable-cors.org/server.html</a> waiting to find some answers, sadly there were no playframework information there, but as this would be implementede easily as a Java Filter (we should only add one line to the response headers) we found the proper documentation at <a href="https://www.playframework.com/documentation/2.5.x/CorsFilter">https://www.playframework.com/documentation/2.5.x/CorsFilter</a> Of course we could implement a <a href="https://www.playframework.com/documentation/2.5.x/ScalaHttpFilters">filter</a> to do it, but is much simpler to just use what is already tested :) so we just follow the instructions that are in summary:</p>
<ul>
<li>enable the filter at build.sbt, libraryDependencies += filters</li>
<li>make the changes to the Filter class, to use the CORSFilter</li>
<li>configure the parameters of the CORS filter at applications.conf</li>
</ul>
<pre><code>play.filters {
 cors {
 # allow all paths
 pathPrefixes = \[&quot;/&quot;\]
 
 # allow all origins (You can specify if you want)
 **allowedOrigins = null**
 
 allowedHttpMethods = \[&quot;GET&quot;, &quot;POST&quot;, &quot;PUT&quot;, &quot;DELETE&quot;\]
 
 # allow all headers
 allowedHttpHeaders = null
 }
 ...
}
</code></pre><p>Now all your attention to this:</p>
<blockquote>
<p>allowedOrigins should be NULL to accept ANY origin.</p>
</blockquote>
<p>Other warning before you loose some time trying to find out why the &ldquo;Access-Control-Allow-Origin: *&rdquo; header is NOT showing at all in the response, like this screenshot below from the <a href="https://developer.chrome.com/devtools">Chrome inspector</a>. <img src="/images/2016/10/no_cors_response_headers.png" alt="no_cors_response_headers"></p>
<blockquote>
<p>&hellip;by default no headers are exposed&hellip;</p>
</blockquote>
<p>So don´t expect the header to show unless you setup to show. To test if the CORS is working properly use this site that offer an quick and easy test environment that make a call to your service to check if CORS is ok. <a href="http://www.test-cors.org/">http://www.test-cors.org/</a></p>
]]></content></item><item><title>publish playframework to production</title><link>http://hamiltonlima.com/posts/publish-playframework-to-production/</link><pubDate>Wed, 19 Oct 2016 23:06:29 +0000</pubDate><guid>http://hamiltonlima.com/posts/publish-playframework-to-production/</guid><description>Running an playframework application locally is very easy, you just go to the folder, and run
activator run But how to put all of the necessary files at a server? end of the day we are talking about lots of files and dependencies. Luckly, playframework has a command and instructions for that, its called
dist That creates an zip file with all the necessary libraries and config files in order to run the application at the server.</description><content type="html"><![CDATA[<p>Running an playframework application locally is very easy, you just go to the folder, and run</p>
<pre><code>activator
run
</code></pre><p>But how to put all of the necessary files at a server? end of the day we are talking about lots of files and dependencies. Luckly, <a href="https://www.playframework.com/documentation/2.5.x/Deploying">playframework has a command and instructions</a> for that, its called</p>
<pre><code>dist
</code></pre><p>That creates an zip file with all the necessary libraries and config files in order to run the application at the server. The name of the file will be based on the version that is setup in the build.sbt file, for example: version := &ldquo;1.0&rdquo;, would result in a file named: beepify\target\universal\beepify-1.1.zip After the dist command finishes, just upload the file to the server. Simple solution is create an user at the server, <a href="https://filezilla-project.org/">connect using SFTP/ SSH</a> and send the file to the /tmp folder. After the upload install Java and unzip the file to the folder where it will live, I /var/www/beepify-1-1, here are the commands I used after logging on the server as root [yes I know that shouldn´t log as root :)] :</p>
<pre><code>sudo apt-get install default-jdk
sudo apt-get install unzip
cd /tmp
unzip beepify-1.1.zip
mv beepify-1.1 /var/www
cd /var/www/beepify-1.1/bin
nohup ./beepify &amp;
</code></pre><p>The last command, the one with nohup, captures the console outputs from the application in a file called nohup.out and the &amp; at the end make sure that you can close the console without closing the application. When you start the application the file RUNNING_PID is created at the application folder with the process id of the running application, If the application crashes you need to remove this files before you start it again. Other important configuration is to setup nginx to redirect /beepify to the 9000 port where the application is running. but there is one little issue that I had to deal with. A simple reverse proxy of with /beepify, would result in a call to host:9000/beepify/ at my application, in order to makeit work, I would need to change all my routes, adding the application name, so the routes would be /beepify/products for example instead of /products. That wasn´t acceptable, let´s say I want to change the exposed url for any reason, that would be hardcoded in the application. let´s we need to publish more than one url and split traffic for example? so fixed preffix names are not a good idea. I rather created an rule in the proxy to remove from the urls the preffix /beepify when redirecting to the application at port 9000. This is the location definition I used on /etc/nginx/nginx.conf location</p>
<pre><code>location /beepify {
   rewrite ^/beepify(/.\*)$ $1 break;
   proxy\_pass http://127.0.0.1:9000/;
}
</code></pre><p>See more rules here: <a href="https://www.nginx.com/blog/creating-nginx-rewrite-rules/">Creating NGINX rewrite rules</a></p>
]]></content></item><item><title>should price be an attribute ?</title><link>http://hamiltonlima.com/posts/should-price-be-an-attribute/</link><pubDate>Wed, 19 Oct 2016 22:32:59 +0000</pubDate><guid>http://hamiltonlima.com/posts/should-price-be-an-attribute/</guid><description>Just after I post about the data structure and server side implementation of beepify.io, I got a question about the Price entity. One very experienced guy on SAP technologies said:
I never saw Price as an entity, allways saw as attribute, why you made Price an Entity?
And support his question he also send some example structure. My first was, I had no idea why the model has price as entity :) but after some thinking, I just realized that I model in the way I tought about the business.</description><content type="html"><![CDATA[<p>Just after I post about the data structure and server side implementation of beepify.io, I got a question about the Price entity. One very experienced guy on SAP technologies said:</p>
<blockquote>
<p>I never saw Price as an entity, allways saw as attribute, why you made Price an Entity?</p>
</blockquote>
<p>And support his question he also send some example structure. <img src="/images/2016/10/should-price-be-an-attribute.png" alt="should-price-be-an-attribute"> My first was, I had no idea why the model has price as entity :) but after some thinking, I just realized that I model in the way I tought about the business. So the Price information for this business is more relevant than the store itself. We could change the model to be: Product &gt; Store &gt; Price, but at the end it makes more sense to have: Product &gt; Price &gt; Store. Of course there is the argument that we could have a price without a store and add the store in the future, but this argument could be overcome by one separated table for the new prices, that could be batch processed to add the stores and then be part of the main table. As conclusion I beleive that modeling should follow the natural thinking of the business, so it should make sense for whom will use a lot, and sometimes both solutions are good. Saying that I keep: <strong>Product &gt; Price &gt; Store</strong> <img src="/images/2016/10/beepify-database.png" alt="beepify-database"> Thanks for the feedback: <a href="https://br.linkedin.com/in/ramon-gomes-santos-0768181a">Ramon Santos</a>!</p>
]]></content></item><item><title>beepify.io, server side release 1 - part 2</title><link>http://hamiltonlima.com/posts/beepify-io-server-side-release-1-part-2/</link><pubDate>Mon, 17 Oct 2016 19:58:24 +0000</pubDate><guid>http://hamiltonlima.com/posts/beepify-io-server-side-release-1-part-2/</guid><description>The second part of the server side release 1 will describe some details about the implementation it self. please see the first part for configuration details.
Quick tips to a playframework application Of course there are tons of nice features that can be used, but for the sake of simplicity here are the concepts that I consider the most important ones for this implementation: Edit the file conf/routes to match the services urls and the implementation of it, as simple as: GET /mock controllers.</description><content type="html"><![CDATA[<p>The second part of the server side release 1 will describe some details about the implementation it self. please <a href="https://hamiltonlima.com/blog/beepify-io-server-side-release-1-part1/">see the first part</a> for configuration details.</p>
<h3 id="quick-tips-to-aplayframework-application">Quick tips to a playframework application</h3>
<ul>
<li>Of course there are tons of nice features that can be used, but for the sake of simplicity here are the concepts that I consider the most important ones for this implementation:</li>
<li>Edit the file <strong>conf/routes</strong> to match the services urls and the implementation of it, as simple as: <strong>GET /mock controllers.MockDataController.add()</strong>, that will publish the url /mock at your application, and when this address is call the method add() from the class MockDataController will be called, and that class is implemented at the folder app/controllers and extends Controller</li>
<li>Create your model classes, as <a href="https://pt.wikipedia.org/wiki/Plain_Old_Java_Objects">POJO</a> files, make life simple all the attributes can be public, you just need to add the @Entity notation, extend Model class and add @Id notation as well, that will generate the necessary table in the database to store your objects</li>
<li>Use <a href="https://ebean-orm.github.io/">Ebean</a> to read data from the database, most of the time is very simple and straightforward, for example an simple find by barcode on the Products is written like this:</li>
</ul>
<pre><code>     new Model.Finder(Product.class).where().eq(&quot;barcode&quot;, barcode).findUnique();
</code></pre><h3 id="declaring-relationship-between-classes">Declaring relationship between classes</h3>
<p>This is the tables in use for this application <img src="/images/2016/10/beepify-database.png" alt="beepify-database"> Note that we have some relationships: from Product to Prices, from Prices to Product and from Prices to Store, let´s see how this represented in the Java code. For reference here are the complete java classes :</p>
<ul>
<li><a href="/images/2016/10/Price.java_.txt">Price.java</a></li>
<li><a href="/images/2016/10/Product.java_.txt">Product.java</a></li>
<li><a href="/images/2016/10/Store.java_.txt">Store.java</a></li>
</ul>
<p>At the Product class the relationship with the list of Price is represented by the annotation @OneToMany that indicates the attribute &ldquo;product&rdquo; as the way to map Price to one Product</p>
<pre><code>   @OneToMany(mappedBy=&quot;product&quot;)
     public List&lt;Price&gt; prices;
</code></pre><p>At the Price class we have counterpart of the relationship represented with the annotation
@ManyToOne</p>
<pre><code>@ManyToOne
 @JsonIgnore
 public Product product;
</code></pre><blockquote>
<p>Note that the attribute &ldquo;product&rdquo; also has an annotation @JsonIgnore, that will avoid an infinite recursion when trying to generate an JSON to represent a product. without this instruction the JSON parser would try to read the prices list of the product that is in the price, that would result in a infinite loop (been there done that)</p>
</blockquote>
<p>The infinite loop error :) <img src="/images/2016/10/2016-10-16_2006.png" alt="2016-10-16_2006"> The Controllers On this implementation we have the following urls/controllers GET /products controllers.ProductController.getAll() GET /product/:barcode controllers.ProductController.findByBarcode(barcode: String) GET /mock controllers.MockDataController.add() /products as the name implies read all the existing products, this of course is only usable for tests, imagine a service returning 100k products&hellip; /product/:barcode is an url that accepts one parameter and that parameter will be passed to the method findByBarcode( ), so its possible to make calls like: /product/00000 where 00000 is the barcode of the product to be search. /mock is a service to create the test data used in this implementation. Here are the full source code for each controller, the itself is very simple and straight forward, for example a way to store each Model to the database is calling the method: save(), simple isn´t it ? ;)</p>
<ul>
<li><a href="/images/2016/10/ProductController.java_.txt">ProductController.java</a></li>
<li><a href="/images/2016/10/MockDataController.java_.txt">MockDataController.java</a></li>
</ul>
]]></content></item><item><title>beepify.io, server side release 1 - part 1</title><link>http://hamiltonlima.com/posts/beepify-io-server-side-release-1-part1/</link><pubDate>Mon, 17 Oct 2016 19:10:05 +0000</pubDate><guid>http://hamiltonlima.com/posts/beepify-io-server-side-release-1-part1/</guid><description>These are the server side release 1 original plan, that is complete with some minor changes highlighted on each line
Install playframework environment - not in the original plan Create the models Read current location latitude, longitude Add sample data to the database - changed to use a service to create data instead of SQL to add data Create services Get data receive product code, latitude and longitude Return all prices It´s impressive how environment setup takes time, usually we forget to include this step when planning projects, but believe me this takes of time in a project, let´s go over each step I did on this implementation.</description><content type="html"><![CDATA[<p>These are the server side release 1 original plan, that is complete with some minor changes highlighted on each line</p>
<ul>
<li>Install playframework environment - <a href="https://hamiltonlima.com/blog/beepify-io-implementation-plan/">not in the original plan</a></li>
<li>Create the models</li>
<li>Read current location latitude, longitude</li>
<li>Add sample data to the database - changed to use a service to create data instead of SQL to add data</li>
<li>Create services</li>
<li>Get data receive product code, latitude and longitude</li>
<li>Return all prices</li>
</ul>
<p>It´s impressive how environment setup takes time, usually we forget to include this step when planning projects, but believe me this takes of time in a project, let´s go over each step I did on this implementation.</p>
<h3 id="playframework-install">Playframework install</h3>
<p><img src="/images/2016/10/2016-10-17_1626.png" alt="2016-10-17_1626"></p>
<p>The installation is very straight forward: <a href="http://playframework.com/download">download the package</a>, save to a easy to remember folder, add the bin folder to the path and you are ALMOST done.</p>
<p>Next step create the project </p>
<p>I say almost, because the first time you create a project, the activator will download all the necessary libraries&hellip; seriously this takes time :) and if you are creating your project inside a dropbox folder as I did, remember to disable dropbox while activator is downloading the files.</p>
<h3 id="how-tocreate-the-project">How to create the project</h3>
<ul>
<li>at the console, at windows: windows / run / cmd</li>
<li>cd to the root folder of your projects</li>
<li>run: activator new</li>
<li>I pick the project type: play-java</li>
<li>goto the project folder, in this example: cd beepify</li>
<li>run the project: activator run, &hellip; then wait forever to the download complete.</li>
</ul>
<p>While the download was working I use the time to watch this nice overview on playframework: <a href="http://www.youtube.com/watch?v=bLrmnjPQsZc">https://www.youtube.com/watch?v=bLrmnjPQsZc</a></p>
<h3 id="ide-integration---eclipse">IDE integration - Eclipse</h3>
<p>As I use Eclipse since forever, I really need to make sure I can edit Java code on it. The instructions are very clear on the <a href="https://www.playframework.com/documentation/2.5.x/IDE">documentation</a>, but there is one point that I should highlight:</p>
<blockquote>
<p>COMPILE the project BEFORE running the eclipse command</p>
</blockquote>
<p>You will need to add Scala integration so it´s easier to edit the templates, that are by default written in scala, just install this plugin http://scala-ide.org/download/current.html. As I´m familiar with all the option from the plugin I just then all, it worked fine.</p>
<p>If you know how to install plugins in eclipse from urls, here it is: http://download.scala-ide.org/sdk/lithium/e44/scala211/stable/site</p>
<p>Now that you have your eclipse ready to import the project, add the following changes BEFORE you compile the project</p>
<p>on file: project/plugins.sbt</p>
<p>addSbtPlugin(&ldquo;com.typesafe.sbt&rdquo; % &ldquo;sbt-play-ebean&rdquo; % &ldquo;3.0.2&rdquo;)<br>
addSbtPlugin(&ldquo;com.typesafe.sbteclipse&rdquo; % &ldquo;sbteclipse-plugin&rdquo; % &ldquo;4.0.0&rdquo;)</p>
<p>on file: build.sbt</p>
<p>enablePlugins(PlayEbean)</p>
<p>Run the activator at the project folder, and in the activator console run : </p>
<ul>
<li>reload</li>
<li>compile</li>
<li>eclipse</li>
</ul>
<p>After this finished go to eclipse and import the project to the Eclipse workspace</p>
<h3 id="prepare-the-database">Prepare the database</h3>
<p>Play apps can run with in memory databases, but I want to start with a more real example using mysql as database, the first thing to do is to create the database and the user that your application will use to store the data, I put together this script that I save in the docs folder of the project.</p>
<pre><code>CREATE USER 'beepify\_user\_db'@'%' IDENTIFIED BY 'fFRbUPmS9BSHggR';
CREATE USER 'beepify\_user\_db'@'localhost' IDENTIFIED BY 'fFRbUPmS9BSHggR';

CREATE SCHEMA db\_beepify DEFAULT CHARACTER SET utf8;
GRANT ALL PRIVILEGES ON db\_beepify.\* TO 'beepify\_user\_db'@'%' WITH GRANT OPTION;
GRANT ALL PRIVILEGES ON db\_beepify.\* TO 'beepify\_user\_db'@'localhost' WITH GRANT OPTION;
FLUSH PRIVILEGES;
</code></pre><p>You can generate nice and <a href="https://www.random.org/passwords/?num=5&amp;len=15&amp;format=html&amp;rnd=new">random passwords here</a>, and the above username, database names and passwords are not the ones I used :)</p>
<p>Change play configuration to use the new database</p>
<p><strong>change to match the following at conf/application.conf</strong></p>
<pre><code>play.db {
  config = &quot;db&quot;
  default = &quot;default&quot;
... 

db {
    default.driver=com.mysql.jdbc.Driver
    default.url=&quot;jdbc:mysql://127.0.0.1:3306/db\_beepify?characterEncoding=UTF-8&quot;
    default.username=beepify\_user\_db
    default.password=&quot;fFRbUPmS9BSHggR&quot;

...
</code></pre><p>ebean.default=&ldquo;models.*&rdquo;</p>
<blockquote>
<p>Important comment on this configuration: ebean.default=&ldquo;models.*&rdquo; will indicate to Ebean framework, that is the ORM framework installed by default with Playframework, that the package models is used to store all of your models</p>
</blockquote>
<p><strong>add to build.sbt</strong></p>
<pre><code>libraryDependencies += &quot;mysql&quot; % &quot;mysql-connector-java&quot; % &quot;5.1.36&quot;
libraryDependencies += evolutions

enablePlugins(PlayEbean)
</code></pre><p>With these configurations in place you are ready to build the application.</p>
]]></content></item><item><title>beepify.io - implementation plan</title><link>http://hamiltonlima.com/posts/beepify-io-implementation-plan/</link><pubDate>Sun, 16 Oct 2016 15:00:21 +0000</pubDate><guid>http://hamiltonlima.com/posts/beepify-io-implementation-plan/</guid><description>This is the first implementation plan :) that will of course change during the implementation. So this is only the first guideline. - release 1 server create the models - read current location latitude, longitude (will need this to test) - add sample data to the database create services - get data receive product code, latitude and longitude return all prices deploy application to server client enter product code get current location from GPS get product prices from server - release 2 client read barcode server restrict the list to 1km range - release 3 client show stores in a map - release 4 server - add data service client - if product not found add data</description><content type="html">&lt;p>This is the first implementation plan :) that will of course change during the implementation. So this is only the first guideline. - release 1 server create the models - read current location latitude, longitude (will need this to test) - add sample data to the database create services - get data receive product code, latitude and longitude return all prices deploy application to server client enter product code get current location from GPS get product prices from server - release 2 client read barcode server restrict the list to 1km range - release 3 client show stores in a map - release 4 server - add data service client - if product not found add data&lt;/p></content></item><item><title>beepify.io - start</title><link>http://hamiltonlima.com/posts/beepify-io-start/</link><pubDate>Sun, 16 Oct 2016 12:51:26 +0000</pubDate><guid>http://hamiltonlima.com/posts/beepify-io-start/</guid><description>This will be one selfhackton project, to explore play framework as server side implementation and Ionic framework at the client side What is the main value of beepify.io?
Offer product information at your fingertips.
Beepify.io will allow the customer to receive product information by scanning the product bar code.
The start As I am planning to participate on the next Vanhackton, I invited other participants to start a project to warmup on some technologies:</description><content type="html"><![CDATA[<p>This will be one selfhackton project, to explore <a href="https://playframework.com/">play framework</a> as server side implementation and <a href="http://ionicframework.com/">Ionic framework</a> at the client side What is the main value of beepify.io?</p>
<blockquote>
<p>Offer product information at your fingertips.</p>
</blockquote>
<p>Beepify.io will allow the customer to receive product information by scanning the product bar code.</p>
<h3 id="the-start">The start</h3>
<p>As I am planning to participate on the next Vanhackton, I invited other participants to start a project to warmup on some technologies:</p>
<ul>
<li><a href="https://jonathancbarros.github.io">Jonathan Barros - https://jonathancbarros.github.io</a></li>
<li><a href="https://crisecheverria.github.io">Cristian Echeverria - https://crisecheverria.github.io</a></li>
<li><a href="https://andreluizreis.github.io/">Andre Luiz - https://andreluizreis.github.io</a></li>
</ul>
<p>We decided together the overall details of the application but decided that each one should build his own implementation. First we had several ideas of what information to send to the customer about the product, the initial list was big:</p>
<ul>
<li>prices</li>
<li>location</li>
<li>nutricional information</li>
<li>similar products</li>
<li>feedback from users</li>
<li>reviews in stars</li>
<li>talk to the company</li>
<li>data from the user</li>
<li>pictures</li>
<li>special info from the manufactor</li>
<li>prices from stores</li>
<li>product details details from the company</li>
<li>product details from the customers</li>
</ul>
<p>but after some voting, we managed to reduce the list to only five items:</p>
<ul>
<li>compare prices</li>
<li>add user reviews</li>
<li>create product lists</li>
<li>chat with customer service</li>
<li>search in stores nearby</li>
</ul>
<p>After doing a quick public opinion poll at the vanhackton slack channel that has around 600 users, we got the feedback we need: compare prices and search in stores nearby were the public choice. Here are the poll results <img src="/images/2016/10/beepify-poll.png" alt="beepify-poll"> We use the following command to create the poll:</p>
<pre><code>/poll &quot;We the beepify team are warming up for the hackton, so we decided to create an application that will give information about products. What feature you choose to be the first one ?&quot; &quot;Compare prices&quot; &quot;Add user reviews&quot; &quot;Create product lists&quot; &quot;Chat with customer service&quot; &quot;Search in stores nearby&quot;
</code></pre><p>With that results we decided to merge the compare prices with the search in stores nearby in one feature.</p>
<h3 id="the-application-flow">The application flow</h3>
<p>These are the steps that the application should follow: 1 - When the application opens it should be ready to scan the bar code 2 - As soon it detects a bar code, it should beep, blink the screen and redirect to the results screen 3 - The results screen shows a map with products and prices, pointing at the map the stores. The following are some suggestion of UI implementation:</p>
<ul>
<li>a - 50% with map + 50% with the list of products and prices</li>
<li>b - 100% map + button or action to show the list of products</li>
<li>c - other option</li>
</ul>
<p>The data structures and server side services is documented using <a href="http://swagger.io">http://swagger.io</a>, in order to see the documentation file go to the <a href="http://editor.swagger.io/">Swagger online editor</a> and paste the content of this file: <a href="/images/2016/10/beepify.io_.yaml_.txt">beepify-io-yaml</a> The result will be a nice and organized documentation of the data structures and services parameters like this <img src="/images/2016/10/2016-10-16_0944.png" alt="2016-10-16_0944"></p>
]]></content></item><item><title>selfhackaton the start</title><link>http://hamiltonlima.com/posts/selfhackaton-the-start/</link><pubDate>Sun, 16 Oct 2016 12:15:27 +0000</pubDate><guid>http://hamiltonlima.com/posts/selfhackaton-the-start/</guid><description>When I first heard about the Vanhackton, all I could remember was the nice experiences with the LudumDare hackatons. With the good memories also came the lessons learned from the journey of creating something from Friday night until Sunday night, here are some lessons that I can remember:
Warmup with the technologies you are planning to use Download and Install all the tools you will need Make sure you can save files in the repository you are planning to use during the hackton Make arrangements with your family, make sure they understand that you will be offline from family duties during that weekend :) Sleep, seriously plan your sleep time during the weekend Eat, again seriously plan to eat good food during the weekend that makes a lot of difference Have fun, remember YOLO To warmup with the technologies a good option is to have a small project to create, that gives you a target and organize your mindset to build something.</description><content type="html"><![CDATA[<p>When I first heard about the <a href="https://www.vanhack.com/hackathon/">Vanhackton</a>, all I could remember was the nice experiences with the <a href="http://ludumdare.com/compo/">LudumDare</a> hackatons. With the good memories also came the lessons learned from the journey of creating something from Friday night until Sunday night, here are some lessons that I can remember:</p>
<ul>
<li>Warmup with the technologies you are planning to use</li>
<li>Download and Install all the tools you will need</li>
<li>Make sure you can save files in the repository you are planning to use during the hackton</li>
<li>Make arrangements with your family, make sure they understand that you will be offline from family duties during that weekend :)</li>
<li>Sleep, seriously plan your sleep time during the weekend</li>
<li>Eat, again seriously plan to eat good food during the weekend that makes a lot of difference</li>
<li>Have fun, remember <a href="https://en.wikipedia.org/wiki/YOLO_(motto)">YOLO</a></li>
</ul>
<p>To warmup with the technologies a good option is to have a small project to create, that gives you a target and organize your mindset to build something. I will keep track of my warming up experiences, so I can remember in the future the good and the not so good decisions I made, and hopefully learn from the comments and feedbacks, let´s code! <img src="/images/2016/10/i-just-felt-like-coding.png" alt="i-just-felt-like-coding"></p>
]]></content></item><item><title>The birth of robolucha</title><link>http://hamiltonlima.com/posts/the-birth-of-robolucha/</link><pubDate>Thu, 03 Mar 2016 00:28:45 +0000</pubDate><guid>http://hamiltonlima.com/posts/the-birth-of-robolucha/</guid><description>Several years ago, on 2004, when I was a teacher the Unicarioca University, I used robocode to make the Java learning more interesting. That was fantastic, the students were able to move their objectives from the code to build a robot that could perform better than others.
[caption id=&amp;ldquo;attachment_7&amp;rdquo; align=&amp;ldquo;alignnone&amp;rdquo; width=&amp;ldquo;653&amp;rdquo;]me in the lab trolling one random student about his Java code.[/caption]
After everybody finished their coding, all robots packed as jar files were sent to the teacher, a.</description><content type="html"><![CDATA[<p>Several years ago, on 2004, when I was a teacher the Unicarioca University, I used <a href="http://robocode.sourceforge.net/">robocode</a> to make the Java learning more interesting. That was fantastic, the students were able to move their objectives from the code to build a robot that could perform better than others.</p>
<p>[caption id=&ldquo;attachment_7&rdquo; align=&ldquo;alignnone&rdquo; width=&ldquo;653&rdquo;]<img src="/images/2016/10/lab-troll.jpeg" alt="me in the lab trolling one random student about his Java code."> me in the lab trolling one random student about his Java code.[/caption]</p>
<p>After everybody finished their coding, all robots packed as jar files were sent to the teacher, a.k.a. ME and we all went to the university auditorium so everybody could the matches.</p>
<p>And it really looked like a soccer match sometimes, people cheering, jumping, picking their favorites, so the competition was giving some joy to Java programming after all.</p>
<p>But the world was not perfect … There were an weird feelling among all the coders, their creations, their babies were alone in the competition, and the creators were not able to help !!</p>
<p>[caption id=&ldquo;attachment_6&rdquo; align=&ldquo;alignnone&rdquo; width=&ldquo;653&rdquo;]<img src="/images/2016/10/sad-creators.jpeg" alt="Sad creators that couldn’t change their robots."> Sad creators that couldn’t change their robots.[/caption]</p>
<p>Robocode is fantastic, but after you pack your robot you cannot change it, it goes as it is to the combat zone. So the creators felt powerless, and that pain gave me the idea of create something like robocode but where you could change the code during the match, so the combat would be more interactive, and the relationship between the creator and the creature would be much more intense.</p>
<p>So that idea haunted me for years, then finally on 2014, ouch 10 years later ! I started to build <a href="https://www.facebook.com/robolucha">robolucha</a>, it started with a name of robot.js. It born when I was teaching game programming at NAVE, a High scholl at Rio de Janeiro, and with Fabio Corato help on some math implementation, I build a version based on nodejs where we could change the code on the fly !!</p>
<p>And that was the birth of <a href="https://www.facebook.com/robolucha">robolucha </a>!! you can play it today.</p>
]]></content></item></channel></rss>